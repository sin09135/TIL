==========================
      2장 SQL 문법 
==========================

p27 
SELECT CUSTOMERNUMBER 
FROM CLASSICMODELS.CUSTOMERS;


P29 
SELECT SUM(AMOUNT), 
COUNT(CHECKNUMBER)
FROM CLASSICMODELS.PAYMENTS;


p30 
SELECT PRODUCTNAME, PRODUCTLINE 
FROM CLASSICMODELS.PRODUCTS;


p31 
SELECT COUNT(PRODUCTCODE) AS N_PRODUCTS, 
COUNT(PRODUCTCODE) N_PRODUCTS 
FROM CLASSICMODELS.PRODUCTS;


p32 
SELECT DISTINCT ORDERNUMBER 
FROM CLASSICMODELS.ORDERDETAILS;


p35 
SELECT *
FROM CLASSICMODELS.ORDERDETAILS 
WHERE PRICEEACH BETWEEN 30 AND 50;


p36 
SELECT *
FROM CLASSICMODELS.ORDERDETAILS
WHERE PRICEEACH >= 30;


p38 
SELECT CUSTOMERNUMBER 
FROM CLASSICMODELS.CUSTOMERS 
WHERE COUNTRY IN ('USA', 'Canada');


p39 
SELECT CUSTOMERNUMBER 
FROM CLASSICMODELS.CUSTOMERS
WHERE COUNTRY NOT IN ('USA', 'Canada');


p41 
SELECT EMPLOYEENUMBER 
FROM CLASSICMODELS.EMPLOYEES 
WHERE REPORTSTO IS NULL;


p42 
SELECT ADDRESSLINE1 
FROM CLASSICMODELS.CUSTOMERS
WHERE ADDRESSLINE1 LIKE '%ST%';


p44
SELECT COUNTRY, CITY, COUNT(CUSTOMERNUMBER) AS N_CUSTOMERS
FROM CLASSICMODELS.CUSTOMERS
GROUP BY COUNTRY, CITY;


p46
SELECT SUM(CASE WHEN COUNTRY = 'USA' THEN 1 ELSE 0 END) AS N_USA, 
SUM(CASE WHEN COUNTRY = 'USA' THEN 1 ELSE 0 END)/COUNT(*) AS USA_PORTION
FROM CLASSICMODELS.CUSTOMERS;


p49
SELECT A.ORDERNUMBER, B.COUNTRY
FROM CLASSICMODELS.ORDERS A
LEFT JOIN CLASSICMODELS.CUSTOMERS B
ON A.CUSTOMERNUMBER = B.CUSTOMERNUMBER;


p50
SELECT A.ORDERNUMBER, B.COUNTRY
FROM CLASSICMODELS.ORDERS A
LEFT JOIN CLASSICMODELS.CUSTOMERS B
ON A.CUSTOMERNUMBER = B.CUSTOMERNUMBER 
WHERE B.COUNTRY = 'USA';


p52
SELECT A.ORDERNUMBER, B.COUNTRY 
FROM CLASSICMODELS.ORDERS A
INNER JOIN CLASSICMODELS.CUSTOMERS B
ON A.CUSTOMERNUMBER = B.CUSTOMERNUMBER 
WHERE B.COUNTRY = 'USA';


p56
SELECT COUNTRY,
CASE WHEN COUNTRY IN ('USA', 'Canada') THEN 'North America' ELSE 'OTEHRES' END AS region 
FROM CLASSICMODELS.CUSTOMERS;


p57
SELECT CASE WHEN COUNTRY IN ('USA', 'Canada') then 'NORTH AMERICA' ELSE 'OTHERS' END AS region,
COUNT(CUSTOMERNUMBER) AS N_CUSTOMERS
FROM CLASSICMODELS.CUSTOMERS
GROUP BY CASE WHEN COUNTRY IN ('USA', 'Canada') THEN 'NORTH AMERICA' ELSE 'OTHERS' END;


SELECT CASE WHEN COUNTRY IN ('USA', 'Canada') then 'NORTH AMERICA' ELSE 'OTHERS' END AS region,
COUNT(CUSTOMERNUMBER) AS N_CUSTOMERS
FROM CLASSICMODELS.CUSTOMERS
GROUP BY 1;


p60 
SELECT BUYPRICE, 
ROW_NUMBER() OVER(ORDER BY BUYPRICE) AS ROWNUMBER, 
RANK() OVER(ORDER BY BUYPRICE) AS RNK,
DENSE_RANK() OVER(ORDER BY BUYPRICE) AS DENSERANK 
FROM CLASSICMODELS.PRODUCTS;


p61 
SELECT BUYPRICE, 
ROW_NUMBER() OVER(PARTITION BY PRODUCTLINE ORDER BY BUYPRICE) AS ROWNUMBER,
RANK() OVER(PARTITION BY PRODUCTLINE ORDER BY BUYPRICE) AS RNK,
DENSE_RANK() OVER(PARTITION BY PRODUCTLINE ORDER BY BUYPRICE) AS DENSERANK
FROM CLASSICMODELS.PRODUCTS;


p63
SELECT ORDERNUMBER 
FROM CLASSICMODELS.ORDERS
WHERE CUSTOMERNUMBER IN 
(SELECT CUSTOMERNUMBER 
FROM CLASSICMODELS.CUSTOMERS
WHERE COUNTRY = 'USA');





==========================
      8장 타이타닉 데이터
==========================

p246
SELECT *
FROM MYDATA.DATASET4 LIMIT 10;


SELECT COUNT(PASSENGERID) AS N_PASSENGERS, 
COUNT(DISTINCT PASSENGERID) AS N_D_PASSENGERS
FROM MYDATA.DATASET4;


p247
SELECT SEX, 
COUNT(PASSENGERID) AS N_PASSENGERS, 
SUM(SURVIVED) AS N_SURVIVED
FROM MYDATA.DATASET4
GROUP BY 1;


SELECT SEX, 
COUNT(PASSENGERID) AS N_PASSENGERS, 
SUM(SURVIVED) AS N_SURVIVED,
SUM(SURVIVED)/COUNT(PASSENGERID) AS SURVIVED_RATIO
FROM MYDATA.DATASET4
GROUP BY 1;


p248
SELECT FLOOR(AGE/10)*10 AS AGEBAND, AGE
FROM MYDATA.DATASET4;


p249
SELECT FLOOR(AGE/10)*10 AS AGEBAND,
COUNT(PASSENGERID) AS N_PASSENGERS,
SUM(SURVIVED) AS N_SURVIVED,
SUM(SURVIVED)/COUNT(PASSENGERID) AS SURVIVED_RATE
FROM MYDATA.DATASET4
GROUP BY 1;


SELECT FLOOR(AGE/10)*10 AS AGEBAND,
COUNT(PASSENGERID) AS N_PASSENGERS,
SUM(SURVIVED) AS N_SURVIVED,
SUM(SURVIVED)/COUNT(PASSENGERID) AS SURVIVED_RATE
FROM MYDATA.DATASET4
GROUP BY 1
ORDER BY 1;


p250
SELECT FLOOR(AGE/10)*10 AS AGEBAND, SEX,
COUNT(PASSENGERID) AS N_PASSENGERS,
SUM(SURVIVED) AS N_SURVIVED,
SUM(SURVIVED)/COUNT(PASSENGERID) AS SURVIVED_RATE
FROM MYDATA.DATASET4
GROUP BY 1, 2
ORDER BY 2, 1;


p251
SELECT FLOOR(AGE/10)*10 AS AGEBAND, SEX,
COUNT(PASSENGERID) AS N_PASSENGERS,
SUM(SURVIVED) AS N_SURVIVED,
SUM(SURVIVED)/COUNT(PASSENGERID) AS SURVIVED_RATE
FROM MYDATA.DATASET4
GROUP BY 1, 2
HAVING SEX = 'male';


p252
SELECT FLOOR(AGE/10)*10 AS AGEBAND, SEX,
COUNT(PASSENGERID) AS N_PASSENGERS,
SUM(SURVIVED) AS N_SURVIVED,
SUM(SURVIVED)/COUNT(PASSENGERID) AS SURVIVED_RATE
FROM MYDATA.DATASET4
GROUP BY 1, 2
HAVING SEX = 'female';


p253
SELECT A.AGEBAND,
A.SURVIVED_RATE AS MALE_SURVIVED_RATE,
B.SURVIVED_RATE AS FEMALE_SURVIVED_RATE,
B.SURVIVED_RATE - A.SURVIVED_RATE AS SURVIVED_RATE_DIFF
FROM
(SELECT FLOOR(AGE/10)*10 AS AGEBAND, SEX,
COUNT(PASSENGERID) AS N_PASSENGERS,
SUM(SURVIVED) AS N_SURVIVED,
SUM(SURVIVED)/COUNT(PASSENGERID) AS SURVIVED_RATE
FROM MYDATA.DATASET4
GROUP BY 1, 2
HAVING SEX = 'male') A
LEFT JOIN
(SELECT FLOOR(AGE/10)*10 AS AGEBAND, SEX,
COUNT(PASSENGERID) AS N_PASSENGERS,
SUM(SURVIVED) AS N_SURVIVED,
SUM(SURVIVED)/COUNT(PASSENGERID) AS SURVIVED_RATE
FROM MYDATA.DATASET4
GROUP BY 1, 2
HAVING SEX = 'female') B
ON A.AGEBAND = B.AGEBAND
ORDER BY A.AGEBAND;


p255
SELECT DISTINCT PCLASS
FROM MYDATA.DATASET4;


p257
SELECT PCLASS,
COUNT(PASSENGERID) AS N_PASSENGERS,
SUM(SURVIVED) AS N_SURVIVED,
SUM(SURVIVED)/COUNT(PASSENGERID) AS SURVIVED_RATE
FROM MYDATA.DATASET4
GROUP BY PCLASS
ORDER BY 1;


p258
SELECT PCLASS, SEX,
COUNT(PASSENGERID) AS N_PASSENGERS,
SUM(SURVIVED) AS N_SURVIVED,
SUM(SURVIVED)/COUNT(PASSENGERID) AS SURVIVED_RATE
FROM MYDATA.DATASET4
GROUP BY PCLASS, SEX
ORDER BY 2, 1;


SELECT PCLASS, SEX,
FLOOR(AGE/10)*10 AS AGEBAND,
COUNT(PASSENGERID) AS N_PASSENGERS,
SUM(SURVIVED) AS N_SURVIVED,
SUM(SURVIVED)/COUNT(PASSENGERID) AS SURVIVED_RATE
FROM MYDATA.DATASET4
GROUP BY PCLASS, SEX, FLOOR(AGE/10)*10
ORDER BY 2, 1;


p260
SELECT EMBARKED,
COUNT(PASSENGERID) AS N_PASSENGERS
FROM MYDATA.DATASET4
GROUP BY 1
ORDER BY 1;


SELECT EMBARKED, SEX,
COUNT(PASSENGERID) AS N_PASSENGERS
FROM MYDATA.DATASET4
GROUP BY 1, 2
ORDER BY 1, 2;


p261
SELECT EMBARKED,
COUNT(PASSENGERID) AS N_PASSENGERS
FROM MYDATA.DATASET4
GROUP BY 1;


SELECT EMBARKED, SEX,
COUNT(PASSENGERID) AS N_PASSENGERS
FROM MYDATA.DATASET4
GROUP BY 1, 2;


p262
SELECT A.EMBARKED,
A.SEX,
A.N_PASSENGERS,
B.N_PASSENGERS AS N_PASSENGERS_TOT,
A.N_PASSENGERS/B.N_PASSENGERS AS PASSENGERS_RAT
FROM
(SELECT EMBARKED, SEX,
COUNT(PASSENGERID) AS N_PASSENGERS
FROM MYDATA.DATASET4
GROUP BY 1, 2) A
LEFT JOIN
(SELECT EMBARKED,
COUNT(PASSENGERID) AS N_PASSENGERS
FROM MYDATA.DATASET4
GROUP BY 1) B
ON A.EMBARKED = B.EMBARKED;


p263
SELECT BOARDED, DESTINATION,
COUNT(PASSENGERID) AS N_PASSENGERS
FROM MYDATA.DATASET4
GROUP BY BOARDED, DESTINATION
ORDER BY 3 DESC;


p264
SELECT *,
ROW_NUMBER() OVER(ORDER BY N_PASSENGERS DESC) AS RNK
FROM
(SELECT BOARDED, DESTINATION,
COUNT(PASSENGERID) AS N_PASSENGERS
FROM MYDATA.DATASET4
GROUP BY BOARDED, DESTINATION)
BASE;


p265
-- CREATE TEMPORARY TABLE MYDATA.ROUTE AS
SELECT BOARDED, DESTINATION
FROM
(SELECT *,
ROW_NUMBER() OVER(ORDER BY N_PASSENGERS DESC) AS RNK
FROM
(SELECT BOARDED, DESTINATION,
COUNT(PASSENGERID) AS N_PASSENGERS
FROM MYDATA.DATASET4
GROUP BY BOARDED, DESTINATION) BASE) 
BASE
WHERE RNK BETWEEN 1 AND 5;


SELECT NAME_WIKI,
A.BOARDED,
A.DESTINATION
FROM MYDATA.DATASET4 A
INNER JOIN MYDATA.ROUTE B
ON A.BOARDED = B.BOARDED AND A.DESTINATION = B.DESTINATION;


p266
SELECT HOMETOWN,
SUM(1) AS N_PASSENGERS,
SUM(SURVIVED)/SUM(1) AS SURVIVED_RATIO
FROM MYDATA.DATASET4
GROUP BY 1;


p267
SELECT HOMETOWN,
SUM(1) AS N_PASSENGERS,
SUM(SURVIVED)/SUM(1) AS SURVIVED_RATIO
FROM MYDATA.DATASET4
GROUP BY 1
HAVING SUM(SURVIVED)/SUM(1) >= 0.5 AND SUM(1) >= 10;


########################
          EOD
########################